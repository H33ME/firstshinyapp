library(shiny)
library(vroom)# for faster file reading
library(tidyverse)
 


download <- function(name) {   
  url <- "https://github.com/hadley/mastering-shiny/blob/master/neiss/"   
  download.file(paste0(url, name), paste0("C:/Users/Herman/Documents/kaggle titanic/titanic kaggle competition/neiss/", name), quiet = TRUE) } 
download("injuries.tsv.gz") 

#the datas
injuries<- vroom::vroom("C:/Users/Herman/Documents/kaggle titanic/titanic kaggle competition/neiss/injuries.tsv.gz")
download.file("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/products.tsv",destfile="C:/Users/Herman/Documents/kaggle titanic/titanic kaggle competition/neiss/popul.tsv")
product<- vroom::vroom("C:/Users/Herman/Documents/kaggle titanic/titanic kaggle competition/neiss/popul.tsv",delim="\t")
download.file("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/population.tsv",destfile="C:/Users/Herman/Documents/kaggle titanic/titanic kaggle competition/neiss/popl.tsv")
population<- vroom::vroom("C:/Users/Herman/Documents/kaggle titanic/titanic kaggle competition/neiss/popl.tsv",delim="\t")

#injuries associated with toilets
selected<- injuries%>%filter(prod_code==649)
nrow(selected)

#location body part and diagnosis of toilet related injuries
selected%>%count(location,wt=weight,sort=TRUE)
selected%>%count(body_part,wt=weight,sort=TRUE)
selected%>%count(diag,wt=weight,sort=TRUE)

# pattern across sex and age
summary<- selected%>%
  count(age,sex,wt=weight)
summary

summary%>%
  ggplot(aes(age,n,colour=sex))+
  geom_line()+
  labs(y="Estimated number of injuries")

# join selected with the whole population
summary<- selected%>%
  count(age,sex,wt=weight)%>%
  left_join(population,by=c("age","sex"))%>%
  mutate(rate=n/population*1e4)# an injury rate
summary

summary%>%
  ggplot(aes(x = age, y = rate, colour = sex))+
  geom_line(na.rm=TRUE)+
  labs(y="Injuries per 10000 people")
max(summary$age)
# pull up some of the narratives
selected%>%
  sample_n(10) %>%
  pull(narrative)

#prototype shiny app
#start as simple as possible
prod_codes<- setNames(product$prod_code,product$title)

ui<- fluidPage(
  fluidRow(
    column(6,
           selectInput("code","Product",choices=prod_codes)
  )
),
fluidRow(
  column(4,tableOutput("diag")),
  column(4,tableOutput("body_part")),
  column(4,tableOutput("location"))
),
fluidRow(
  column(12,plotOutput("age_sex"))
)
)

server<- function(input,output,session){
  selected<- reactive({
    injuries%>%
      filter(prod_code==input$code)
  })
  output$diag<- renderTable({
    selected()%>%count(diag,wt=weight,sort=TRUE)
  })
  output$body_part<- renderTable({
    selected()%>%
      count(body_part, wt=weight,sort=TRUE)
  })
  output$location<- renderTable({
    selected()%>%
      count(location,sort=TRUE)
  })
  summary<- reactive({
    selected()%>%count(age,sex,wt=weight)%>%
      left_join(population,by=c("age","sex"))%>%
      mutate(rate=n/population*1e4)
  })
  output$age_sex<- renderPlot({
    summary()%>%
      ggplot(aes(age,rate,color=sex))+
      geom_line(na.rm=TRUE)+
      labs(y="Estimated number of injuries")
  },res=96)
}
shinyApp(ui,server)

##improving the app
library(forcats)
#using forcats to convert variables into factors and then lump together all levels after the top five
injuries%>%
  mutate(diag=fct_lump(fct_infreq(diag),n=5))%>%
  group_by(diag)%>%
  summarise(n=as.integer(sum(weight)))
#generating a funciton that will do the automation to any variable
count_top<- function(df,var,n=5){
  df%>%
    mutate({{ var }}:=fct_lump(fct_infreq({{ var }}),n=n))%>%
    group_by({{ var }})%>%
    summarise(n=as.integer(sum(weight)))
}

#to be used in the server function
#output$diag<- renderTable(count_top(selected(),diag),width="100%")
#output$body_part<- renderTable(count_top(selected(),body_part),width="100%")
#output$location<- renderTable(count_top(selected(),location),width="100%")
#Rate versus count
#give the user the choice between visualizing the number of injuries or population standardized rate

ui<- fluidPage(
  fluidRow(
    column(8,
           selectInput("code","product",
                       choices=setNames(product$prod_code,product$title),
                       width="100%")),
    column(2,selectInput("y","Y axis",c("rate","count")))
  ),
  fluidRow(
    column(4,tableOutput("diag")),
    column(4,tableOutput("location")),
    column(4,tableOutput("body_part"))
  ),
  fluidRow(
    column(12,plotOutput("age_sex"))
  )
)

server<- function(input,output,session){
  selected<- reactive({
    injuries%>%
      filter(prod_code==input$code)
  })
  output$diag<- renderTable({
    count_top(selected(),diag)
    },width="100%")
  output$body_part<- renderTable({
    count_top(selected(),body_part)
    },width="100%")
  output$location<- renderTable({
    count_top(selected(),location)
    },width="100%")
  summary<- reactive({
    selected()%>%
      count(age,sex,wt=weight)%>%
      left_join(population,by=c("age","sex"))%>%
      mutate(rate=n/population*1e4)
  })
  output$age_sex <- renderPlot({
    if(input$y=="count") {
      summary()%>%
        ggplot(aes(age,n,colour=sex))+
        geom_line()+
        labs(y="Estimated number of injuries")
    } else {
      summary()%>%
        ggplot(aes(age,rate,colour=sex))+
        geom_line(na.rm=TRUE)+
        labs(y="Injuries per 10,000 people")
    }
  }, res=96)
}

shinyApp(ui,server)

# adding narratives
#add a new row to the bottom of the UI
#use an actionButton to trigger a new story and put the narrative in textInput()
#use eventReactive() to create a reactive that only update when button is clicked or the underlying data changes

ui<- fluidPage(
  fluidRow(
    column(8,
           selectInput("code","product",
                       choices=setNames(product$prod_code,product$title),
                       width="100%")),
    column(2,selectInput("y","Y axis",c("rate","count")))
  ),
  fluidRow(
    column(4,tableOutput("diag")),
    column(4,tableOutput("location")),
    column(4,tableOutput("body_part"))
  ),
  fluidRow(
    column(12,plotOutput("age_sex"))
  ),
  fluidRow(
    column(2,actionButton("story","Tell me a story")),
    column(10,textOutput("narrative"))
  )
  
)

server<- function(input,output,session){
  selected<- reactive({
    injuries%>%
      filter(prod_code==input$code)
  })
  output$diag<- renderTable({
    count_top(selected(),diag)
  },width="100%")
  output$body_part<- renderTable({
    count_top(selected(),body_part)
  },width="100%")
  output$location<- renderTable({
    count_top(selected(),location)
  },width="100%")
  summary<- reactive({
    selected()%>%
      count(age,sex,wt=weight)%>%
      left_join(population,by=c("age","sex"))%>%
      mutate(rate=n/population*1e4)
  })
  output$age_sex <- renderPlot({
    if(input$y=="count") {
      summary()%>%
        ggplot(aes(age,n,colour=sex))+
        geom_line()+
        labs(y="Estimated number of injuries")
    } else {
      summary()%>%
        ggplot(aes(age,rate,colour=sex))+
        geom_line(na.rm=TRUE)+
        labs(y="Injuries per 10,000 people")
    }
  }, res=96)
  narrative_sample<- eventReactive({
    list(input$story,selected())
  },selected()%>%
    pull(narrative)%>%
    sample(1))
  output$narrative<- renderText({
    narrative_sample()
  })
}

shinyApp(ui,server)
